using DomainSmith.Abstraction.Generators;
using System.Text;

namespace DomainSmith.Entity.Generators;

internal sealed class EntityBuilder : BaseBuilder
{
    private readonly StringBuilder _typeAgr = new();
    private readonly StringBuilder _idValue = new();
    private readonly StringBuilder _extensionName = new();
    private readonly StringBuilder _extensionReference = new();
    private List<(string Type, string Name)> _properties = new();

    internal void SetTypeAgr(string typeAgr)
    {
        _typeAgr.Clear();
        _typeAgr.Append(typeAgr);
    }

    internal void SetIdValue(string idValue)
    {
        _idValue.Clear();
        _idValue.Append(idValue);
    }

    internal void SetExtensionName(string className)
    {
        _extensionName.Clear();
        _extensionName.Append(className);
        _extensionName.Append("Extensions");
    }

    internal void SetExtensionReference(string? @namespace, string className)
    {
        _extensionReference.Clear();

        if (!string.IsNullOrEmpty(@namespace))
        {
            _extensionReference.Append(@namespace);
            _extensionReference.Append(".");
        }

        _extensionReference.Append(className);
        _extensionReference.Append("Extensions");
    }

    internal void SetProperties(List<EntityGenerator.PropertyInfo> properties)
    {
        _properties = properties.Select(p => (p.Type, p.Name)).ToList();
    }


    protected override string BuildSource()
    {
        var ctorParams = new List<string> { $"{_typeAgr} id" };
        var ctorAssignments = new List<string>();
        var createParams = new List<string>();
        var createArgs = new List<string> { _idValue.ToString() };
        var onCreatingParams = new List<string>();
        var onUpdatingParams = new List<string>();
        var onCreatingRefParams = new List<string>();
        var onUpdatingRefParams = new List<string>();
        var updateAssignments = new List<string>();
        var updateTmpVars = new List<string>();
        var updateRestore = new List<string>();

        foreach (var (type, name) in _properties)
        {
            ctorParams.Add($"{type} {name.ToLower()}");
            ctorAssignments.Add($"{name} = {name.ToLower()};");
            createParams.Add($"{type} {name.ToLower()}");
            createArgs.Add($"{name.ToLower()}");
            onCreatingParams.Add($"ref {type} {name.ToLower()}");
            onUpdatingParams.Add($"ref {type} {name.ToLower()}");
            onCreatingRefParams.Add($"ref {name.ToLower()}");
            onUpdatingRefParams.Add($"ref {name.ToLower()}");
            updateTmpVars.Add($"var tmp{name} = {name};");
            updateAssignments.Add($"{name} = {name.ToLower()};");
            updateRestore.Add($"{name} = tmp{name};");
        }

        var ctorParamsStr = string.Join(", ", ctorParams);
        var ctorAssignmentsStr = string.Join("\n\t\t", ctorAssignments);
        var createParamsStr = string.Join(", ", createParams);
        var createArgsStr = string.Join(", ", createArgs);
        var onCreatingParamsStr = string.Join(", ", onCreatingParams);
        var onUpdatingParamsStr = string.Join(", ", onUpdatingParams);
        var onCreatingRefParamsStr = string.Join(", ", onCreatingRefParams);
        var onUpdatingRefParamsStr = string.Join(", ", onUpdatingRefParams);
        var updateTmpVarsStr = string.Join("\n\t\t", updateTmpVars);
        var updateAssignmentsStr = string.Join("\n\t\t", updateAssignments);
        var updateRestoreStr = string.Join("\n\t\t\t", updateRestore);

        return $$"""
                 // <auto-generated/>
                 {{Usings}}

                 {{Namespace}}

                 partial class {{ClassName}} : Entity<{{_typeAgr}}>
                 {
                     private {{ClassName}}({{ctorParamsStr}}) : base(id)
                     {
                         {{ctorAssignmentsStr}}
                     }

                     public static {{ClassName}}? Create({{createParamsStr}})
                     {
                         OnCreating({{onCreatingRefParamsStr}});
                     
                         var result = new {{ClassName}}({{createArgsStr}});
                         
                         OnCreated(result);
                         if(!{{_extensionReference}}.CanCreate) return null;
                         
                         return result;
                     }
                     
                     public void Update({{createParamsStr}})
                     {
                         OnUpdating({{onUpdatingRefParamsStr}});
                         
                         {{updateTmpVarsStr}}
                         {{updateAssignmentsStr}}
                         
                         OnUpdated();
                         if(!{{_extensionReference}}.CanUpdate) 
                         {
                            {{updateRestoreStr}}
                            return;
                         }
                     
                         return;
                     }
                     
                     static partial void OnCreating({{onCreatingParamsStr}});
                     static partial void OnCreated({{ClassName}} result);

                     partial void OnUpdating({{onUpdatingParamsStr}});
                     partial void OnUpdated();
                     
                     private void AllowUpdate()
                     {
                         {{_extensionReference}}.CanUpdate = true;
                     }
                     
                     private void AllowCreate()
                     {
                         {{_extensionReference}}.CanCreate = true;
                     }
                     
                     private void DisallowUpdate()
                     {
                         {{_extensionReference}}.CanUpdate = false;
                     }
                     
                     private void DisallowCreate()
                     {
                         {{_extensionReference}}.CanCreate = false;
                     }
                 }

                 file static class {{_extensionName}}
                 {
                     public static bool CanCreate = true;
                     public static bool CanUpdate = true;
                 }
                 """;
    }

    protected override bool IsEmpty() =>
        Usings.Length == 0 &&
        Namespace.Length == 0 &&
        ClassName.Length == 0;
}