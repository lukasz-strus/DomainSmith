using DomainSmith.Abstraction.Generators;
using System.Text;

namespace DomainSmith.Entity.Generators;

internal sealed class EntityBuilder : BaseBuilder
{
    private readonly StringBuilder _typeAgr = new();
    private readonly StringBuilder _idValue = new();
    private readonly StringBuilder _extensionName = new();
    private readonly StringBuilder _extensionReference = new();

    internal void SetTypeAgr(string typeAgr)
    {
        _typeAgr.Clear();
        _typeAgr.Append(typeAgr);
    }

    internal void SetIdValue(string idValue)
    {
        _idValue.Clear();
        _idValue.Append(idValue);
    }

    internal void SetExtensionName(string className)
    {
        _extensionName.Clear();
        _extensionName.Append(className);
        _extensionName.Append("Extensions");
    }

    internal void SetExtensionReference(string? @namespace, string className)
    {
        _extensionReference.Clear();

        if (!string.IsNullOrEmpty(@namespace))
        {
            _extensionReference.Append(@namespace);
            _extensionReference.Append(".");
        }

        _extensionReference.Append(className);
        _extensionReference.Append("Extensions");
    }


    protected override string BuildSource() =>
        $$"""
          // <auto-generated/>
          {{Usings}}

          {{Namespace}}

          partial class {{ClassName}} : Entity<{{_typeAgr}}>
          {
              private {{ClassName}}({{_typeAgr}} id) : base(id)
              {
              }

              public static {{ClassName}}? Create()
              {
                  OnCreating();
                  if(!{{_extensionReference}}.CanCreate) return null;
              
                  var result = new {{ClassName}}({{_idValue}});
                  
                  OnCreated(result);
                  if(!{{_extensionReference}}.CanCreate) return null;
                  
                  return result;
              }
              
              public void Update()
              {
                  OnUpdating();
                  if(!{{_extensionReference}}.CanUpdate) return;
                  
                  OnUpdated();
                  if(!{{_extensionReference}}.CanUpdate) return;
              
                  return;
              }
              
              static partial void OnCreating();
              static partial void OnCreated({{ClassName}} result);

              partial void OnUpdating();
              partial void OnUpdated();
              
              private void AllowUpdate()
              {
                  {{_extensionReference}}.CanUpdate = true;
              }
              
              private void AllowCreate()
              {
                  {{_extensionReference}}.CanCreate = true;
              }
              
              private void DisallowUpdate()
              {
                  {{_extensionReference}}.CanUpdate = false;
              }
              
              private void DisallowCreate()
              {
                  {{_extensionReference}}.CanCreate = false;
              }
          }

          file static class {{_extensionName}}
          {
              public static bool CanCreate = true;
              public static bool CanUpdate = true;
          }
          """;

    protected override bool IsEmpty() =>
        Usings.Length == 0 &&
        Namespace.Length == 0 &&
        ClassName.Length == 0;
}