// <auto-generated/>
using System;
using DomainSmith.Abstraction.Core.Primitives;
using DomainSmith.Entity;

namespace TestNamespace;

partial class TestEntity : Entity<Guid>
{
    private TestEntity(Guid id) : base(id)
    {
    }

    public static TestEntity? Create()
    {
        OnCreating();
        if(!TestNamespace.TestEntityExtensions.CanCreate) return null;
    
        var result = new TestEntity(Guid.NewGuid());
        
        OnCreated(result);
        if(!TestNamespace.TestEntityExtensions.CanCreate) return null;
        
        return result;
    }
    
    public void Update()
    {
        OnUpdating();
        if(!TestNamespace.TestEntityExtensions.CanUpdate) return;
        
        OnUpdated();
        if(!TestNamespace.TestEntityExtensions.CanUpdate) return;
    
        return;
    }
    
    static partial void OnCreating();
    static partial void OnCreated(TestEntity result);

    partial void OnUpdating();
    partial void OnUpdated();
    
    private void AllowUpdate()
    {
        TestNamespace.TestEntityExtensions.CanUpdate = true;
    }
    
    private void AllowCreate()
    {
        TestNamespace.TestEntityExtensions.CanCreate = true;
    }
    
    private void DisallowUpdate()
    {
        TestNamespace.TestEntityExtensions.CanUpdate = false;
    }
    
    private void DisallowCreate()
    {
        TestNamespace.TestEntityExtensions.CanCreate = false;
    }
}

file static class TestEntityExtensions
{
    public static bool CanCreate = true;
    public static bool CanUpdate = true;
}